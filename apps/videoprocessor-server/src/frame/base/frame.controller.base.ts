/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FrameService } from "../frame.service";
import { FrameCreateInput } from "./FrameCreateInput";
import { Frame } from "./Frame";
import { FrameFindManyArgs } from "./FrameFindManyArgs";
import { FrameWhereUniqueInput } from "./FrameWhereUniqueInput";
import { FrameUpdateInput } from "./FrameUpdateInput";

export class FrameControllerBase {
  constructor(protected readonly service: FrameService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Frame })
  async createFrame(@common.Body() data: FrameCreateInput): Promise<Frame> {
    return await this.service.createFrame({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Frame] })
  @ApiNestedQuery(FrameFindManyArgs)
  async frames(@common.Req() request: Request): Promise<Frame[]> {
    const args = plainToClass(FrameFindManyArgs, request.query);
    return this.service.frames({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Frame })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async frame(
    @common.Param() params: FrameWhereUniqueInput
  ): Promise<Frame | null> {
    const result = await this.service.frame({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Frame })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFrame(
    @common.Param() params: FrameWhereUniqueInput,
    @common.Body() data: FrameUpdateInput
  ): Promise<Frame | null> {
    try {
      return await this.service.updateFrame({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Frame })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFrame(
    @common.Param() params: FrameWhereUniqueInput
  ): Promise<Frame | null> {
    try {
      return await this.service.deleteFrame({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
