/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Frame } from "./Frame";
import { FrameCountArgs } from "./FrameCountArgs";
import { FrameFindManyArgs } from "./FrameFindManyArgs";
import { FrameFindUniqueArgs } from "./FrameFindUniqueArgs";
import { DeleteFrameArgs } from "./DeleteFrameArgs";
import { FrameService } from "../frame.service";
@graphql.Resolver(() => Frame)
export class FrameResolverBase {
  constructor(protected readonly service: FrameService) {}

  async _framesMeta(
    @graphql.Args() args: FrameCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Frame])
  async frames(@graphql.Args() args: FrameFindManyArgs): Promise<Frame[]> {
    return this.service.frames(args);
  }

  @graphql.Query(() => Frame, { nullable: true })
  async frame(
    @graphql.Args() args: FrameFindUniqueArgs
  ): Promise<Frame | null> {
    const result = await this.service.frame(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Frame)
  async deleteFrame(
    @graphql.Args() args: DeleteFrameArgs
  ): Promise<Frame | null> {
    try {
      return await this.service.deleteFrame(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
