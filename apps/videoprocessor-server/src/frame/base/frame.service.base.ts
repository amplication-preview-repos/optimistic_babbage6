/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Frame as PrismaFrame } from "@prisma/client";

export class FrameServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FrameCountArgs, "select">): Promise<number> {
    return this.prisma.frame.count(args);
  }

  async frames(args: Prisma.FrameFindManyArgs): Promise<PrismaFrame[]> {
    return this.prisma.frame.findMany(args);
  }
  async frame(args: Prisma.FrameFindUniqueArgs): Promise<PrismaFrame | null> {
    return this.prisma.frame.findUnique(args);
  }
  async createFrame(args: Prisma.FrameCreateArgs): Promise<PrismaFrame> {
    return this.prisma.frame.create(args);
  }
  async updateFrame(args: Prisma.FrameUpdateArgs): Promise<PrismaFrame> {
    return this.prisma.frame.update(args);
  }
  async deleteFrame(args: Prisma.FrameDeleteArgs): Promise<PrismaFrame> {
    return this.prisma.frame.delete(args);
  }
}
