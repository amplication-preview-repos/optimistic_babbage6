/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RequestLog } from "./RequestLog";
import { RequestLogCountArgs } from "./RequestLogCountArgs";
import { RequestLogFindManyArgs } from "./RequestLogFindManyArgs";
import { RequestLogFindUniqueArgs } from "./RequestLogFindUniqueArgs";
import { DeleteRequestLogArgs } from "./DeleteRequestLogArgs";
import { RequestLogService } from "../requestLog.service";
@graphql.Resolver(() => RequestLog)
export class RequestLogResolverBase {
  constructor(protected readonly service: RequestLogService) {}

  async _requestLogsMeta(
    @graphql.Args() args: RequestLogCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RequestLog])
  async requestLogs(
    @graphql.Args() args: RequestLogFindManyArgs
  ): Promise<RequestLog[]> {
    return this.service.requestLogs(args);
  }

  @graphql.Query(() => RequestLog, { nullable: true })
  async requestLog(
    @graphql.Args() args: RequestLogFindUniqueArgs
  ): Promise<RequestLog | null> {
    const result = await this.service.requestLog(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RequestLog)
  async deleteRequestLog(
    @graphql.Args() args: DeleteRequestLogArgs
  ): Promise<RequestLog | null> {
    try {
      return await this.service.deleteRequestLog(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
